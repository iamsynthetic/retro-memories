{"ast":null,"code":"var _jsxFileName = \"/Users/tomo/Documents/code/projects/react/retro-memories/src/NavContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NavContext = /*#__PURE__*/createContext();\nexport function NavProvider({\n  children\n}) {\n  _s();\n  const [currentnav, setNav] = useState([{\n    navname: '',\n    waittime: 0\n  }]);\n  const changenav = (navname, waittime) => {\n    setNav(navname, waittime);\n    console.log('navcontext - navname is: ' + navname);\n    console.log('navcontext - waittime is: ' + waittime);\n    console.log('currentnav is: ' + currentnav);\n    console.log('currentnav.navname.value is: ' + currentnav[0].navname);\n  };\n  return /*#__PURE__*/_jsxDEV(NavContext.Provider, {\n    value: {\n      currentnav,\n      changenav\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n}\n_s(NavProvider, \"76Iw1YuGqZTK9cNCuKkkFLPWpBs=\");\n_c = NavProvider;\nexport default NavContext;\n\n//nav context is like redux but in the opposite, you import this into whatever other component\n//you want to use this data.\n\n//right now the main nav calls changenav and sets the navname to whatever was clicked, and\n//also sets the waittime to whatever is set in mainnav\n\n//then the other 'sections' (components like about, projects etc) also import this component\n//and call the currentnav state to find out what it currently is, based off this they should\n//be able to wait for however long the waittime is until they animate in. that's the plan.\nvar _c;\n$RefreshReg$(_c, \"NavProvider\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","NavContext","NavProvider","children","_s","currentnav","setNav","navname","waittime","changenav","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tomo/Documents/code/projects/react/retro-memories/src/NavContext.js"],"sourcesContent":["import { createContext, useState } from \"react\";\n\nconst NavContext = createContext();\n\nexport function NavProvider({children}){\n\n    const [currentnav, setNav] = useState([{navname: '', waittime: 0}])\n\n    const changenav = (navname, waittime) => {\n        setNav(navname, waittime)\n        console.log('navcontext - navname is: ' + navname)\n        console.log('navcontext - waittime is: ' + waittime)\n        console.log('currentnav is: ' + currentnav)\n        console.log('currentnav.navname.value is: ' + currentnav[0].navname)\n    }\n    return(\n        <NavContext.Provider value={{currentnav, changenav}}>\n            {children}\n        </NavContext.Provider>\n    )\n}\nexport default NavContext;\n\n\n//nav context is like redux but in the opposite, you import this into whatever other component\n//you want to use this data.\n\n//right now the main nav calls changenav and sets the navname to whatever was clicked, and\n//also sets the waittime to whatever is set in mainnav\n\n//then the other 'sections' (components like about, projects etc) also import this component\n//and call the currentnav state to find out what it currently is, based off this they should\n//be able to wait for however long the waittime is until they animate in. that's the plan."],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,UAAU,gBAAGJ,aAAa,CAAC,CAAC;AAElC,OAAO,SAASK,WAAWA,CAAC;EAACC;AAAQ,CAAC,EAAC;EAAAC,EAAA;EAEnC,MAAM,CAACC,UAAU,EAAEC,MAAM,CAAC,GAAGR,QAAQ,CAAC,CAAC;IAACS,OAAO,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAC,CAAC,CAAC,CAAC;EAEnE,MAAMC,SAAS,GAAGA,CAACF,OAAO,EAAEC,QAAQ,KAAK;IACrCF,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAAC;IACzBE,OAAO,CAACC,GAAG,CAAC,2BAA2B,GAAGJ,OAAO,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,4BAA4B,GAAGH,QAAQ,CAAC;IACpDE,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAGN,UAAU,CAAC;IAC3CK,OAAO,CAACC,GAAG,CAAC,+BAA+B,GAAGN,UAAU,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC;EACxE,CAAC;EACD,oBACIP,OAAA,CAACC,UAAU,CAACW,QAAQ;IAACC,KAAK,EAAE;MAACR,UAAU;MAAEI;IAAS,CAAE;IAAAN,QAAA,EAC/CA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAE9B;AAACb,EAAA,CAhBeF,WAAW;AAAAgB,EAAA,GAAXhB,WAAW;AAiB3B,eAAeD,UAAU;;AAGzB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}